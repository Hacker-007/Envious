use crate::error::Span;

/// Represents a token that is generated by the `Lexer`.
/// Each token consists of a span (the location information of the token)
/// and the kind of the token.
pub type Token = (Span, TokenKind);

/// Enum that details the differen types of tokens that can be produced
/// by the `Lexer`. The `TokenKind` should strive to only store types that
/// are small in nature and any other types (i.e. String) should be stored in the
/// `Interner`.
#[derive(Debug, PartialEq)]
pub enum TokenKind {
    Whitespace,

    Void,
    Any,
    Int,
    Float,
    Boolean,
    String,
    IntegerLiteral(i64),
    FloatLiteral(f64),
    BooleanLiteral(bool),
    // The actual value for both the `StringLiteral` and the `Identifier` are
    // stored in the `Interner` to reduce redundency in values. Instead,
    // the id's are stored in the variant.
    StringLiteral(usize),
    Identifier(usize),

    LeftParenthesis,
    RightParenthesis,
    LeftCurlyBrace,
    RightCurlyBrace,
    LeftAngleBracket,
    RightAngleBracket,
    Plus,
    Minus,
    Star,
    Slash,
    PercentSign,
    EqualSign,
    ColonEqualSign,
    ExclamationEqualSign,
    LessThanEqualSign,
    GreaterThanEqualSign,
    Comma,
    Colon,
    ColonColon,

    Not,
    Or,
    And,
    Let,
    If,
    Then,
    Else,
    While,
    Define,
}
